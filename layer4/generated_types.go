// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package layer4

// EvaluationPlan defines how a set of Layer 2 controls are to be evaluated.
type EvaluationPlan struct {
	Metadata	Metadata	`json:"metadata" yaml:"metadata"`

	Plans	[]AssessmentPlan	`json:"plans" yaml:"plans"`
}

// Metadata contains metadata about the Layer 4 evaluation plan and log.
type Metadata struct {
	Id	string	`json:"id" yaml:"id"`

	Version	string	`json:"version,omitempty" yaml:"version,omitempty"`

	Evaluator	Evaluator	`json:"evaluator" yaml:"evaluator"`
}

// Evaluator contains the information about the entity that produced the evaluation results.
type Evaluator struct {
	Name	string	`json:"name" yaml:"name"`

	Uri	string	`json:"uri,omitempty" yaml:"uri,omitempty"`

	Version	string	`json:"version,omitempty" yaml:"version,omitempty"`

	Contact	Contact	`json:"contact,omitempty" yaml:"contact,omitempty"`
}

type Contact struct {
	// The contact person's name.
	Name	string	`json:"name" yaml:"name"`

	// Indicates whether this admin is the first point of contact for inquiries. Only one entry should be marked as primary.
	Primary	bool	`json:"primary" yaml:"primary"`

	// The entity with which the contact is affiliated, such as a school or employer.
	Affiliation	*string	`json:"affiliation,omitempty" yaml:"affiliation,omitempty"`

	// A preferred email address to reach the contact.
	Email	*Email	`json:"email,omitempty" yaml:"email,omitempty"`

	// A social media handle or profile for the contact.
	Social	*string	`json:"social,omitempty" yaml:"social,omitempty"`
}

// AssessmentPlan defines all testing procedures for a control id.
type AssessmentPlan struct {
	ControlId	string	`json:"control-id" yaml:"control-id"`

	Assessments	[]Assessment	`json:"assessments" yaml:"assessments"`
}

// Assessment defines all testing procedures for a requirement.
type Assessment struct {
	// RequirementId is the unique identifier for the requirement being tested.
	RequirementId	string	`json:"requirement-id" yaml:"requirement-id"`

	// Procedures defines possible testing procedures to evaluate the requirement.
	Procedures	[]AssessmentProcedure	`json:"procedures" yaml:"procedures"`
}

// AssessmentProcedure describes a testing procedure for evaluating a Layer 2 control requirement.
type AssessmentProcedure struct {
	// Id uniquely identifies the assessment procedure being executed
	Id	string	`json:"id" yaml:"id"`

	// Name provides a summary of the procedure
	Name	string	`json:"name" yaml:"name"`

	// Description provides a detailed explanation of the procedure
	Description	string	`json:"description" yaml:"description"`

	// Documentation provides a URL to documentation that describes how the assessment procedure evaluates the control requirement
	Documentation	string	`json:"documentation,omitempty" yaml:"documentation,omitempty"`
}

// EvaluationLog contains the results of evaluating a set of Layer 2 controls.
type EvaluationLog struct {
	Evaluations	[]*ControlEvaluation	`json:"evaluations" yaml:"evaluations"`

	Metadata	Metadata	`json:"metadata,omitempty" yaml:"metadata,omitempty"`
}

// ControlEvaluation contains the results of evaluating a single Layer 4 control.
// TODO: are all control requirements guaranteed to be evaluated at once, or does applicability influence this?
type ControlEvaluation struct {
	Name	string	`json:"name" yaml:"name"`

	ControlId	string	`json:"control-id" yaml:"control-id"`

	Result	Result	`json:"result" yaml:"result"`

	Message	string	`json:"message" yaml:"message"`

	AssessmentLogs	[]*AssessmentLog	`json:"assessment-logs" yaml:"assessment-logs"`
}

// AssessmentLog contains the results of executing a single assessment procedure for a control requirement.
type AssessmentLog struct {
	// RequirementId identifies the control requirement assessed.
	RequirementId	string	`json:"requirement-id" yaml:"requirement-id"`

	// ProcedureId uniquely identifies the assessment procedure associated with the log
	ProcedureId	string	`json:"procedure-id,omitempty" yaml:"procedure-id,omitempty"`

	Applicability	[]string	`json:"applicability" yaml:"applicability"`

	Description	string	`json:"description" yaml:"description"`

	Result	Result	`json:"result" yaml:"result"`

	Message	string	`json:"message" yaml:"message"`

	Steps	[]AssessmentStep	`json:"steps" yaml:"steps"`

	StepsExecuted	int64	`json:"steps-executed,omitempty" yaml:"steps-executed,omitempty"`

	// "start" is the timestamp when the assessment began.
	Start	Datetime	`json:"start" yaml:"start"`

	// "end" is the timestamp when the assessment concluded.
	End	Datetime	`json:"end,omitempty" yaml:"end,omitempty"`

	// recommendation provides guidance on how to address a failed assessment.
	Recommendation	string	`json:"recommendation,omitempty" yaml:"recommendation,omitempty"`
}

type Datetime string

type Email string
